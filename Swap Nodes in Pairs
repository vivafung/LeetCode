/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *swapPairs(ListNode *head) {  
        ListNode *ptr, *nptr, *pre=NULL;
        
        if(head == NULL || head->next == NULL) 
        {return head;}
        
        ptr = head;
        nptr = head->next;
        head = nptr;
        
        while(nptr != NULL)
        {
            //swap the node
            ptr->next = nptr->next;
            nptr->next = ptr;
            
            //shift pre
            if(pre != NULL)
            {pre->next = nptr;}
            pre = ptr;
            
            //when reach the last node
            if(ptr->next == NULL)
            {break;}
            //when only one node left
            else if(ptr->next->next == NULL)
            {break;}
            //shift ptr and nptr in one step ahead
            else 
            {
                ptr = ptr->next;
                nptr = ptr->next;
            }
        }
        return head;
    } 
};
