Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

//solution 1. DP, segment k lists into two parts and recuisivly merge. 
//Time complexity is T(k) = 2T(k/2) + O(nk), O(nklogk)
//space complexity is the size of the recursive stack. O(logk)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *mergeKLists(vector<ListNode *> &lists) 
    {
        int n = lists.size();
        if(lists.size()==0)
        {return NULL;}
        
        return connector(lists, 0, n-1);
    }
    
    ListNode* connector(vector<ListNode *> &lists, int l, int r)
    {
        if(l<r)
        {
            int m = (l+r)/2;
            return merge2(connector(lists, 1, m),connector(lists, m+1, r));
        }
        return lists[l];
    }
    
    ListNode *merge2(ListNode* l1, ListNode* l2) 
    {
        ListNode *head = new ListNode(0);
        ListNode *ptr = head;
        while(l1 && l2)
        {
            if(l1->val <= l2->val)
            {
                ptr->next = l1;
                l1 = l1->next;
                ptr=ptr->next;
            }
            else
            {
                ptr->next = l2;
                l2 = l2->next;
                ptr = ptr->next;
            }
            ptr = ptr->next;
            if(l1)
            {ptr->next=l1;}
            if(l2)
            {ptr->next=l2;}
        }
        return ptr->next;
    }
    
};


//solutin 2. create a heap 
//Time complexity nlg(k) coz there are n of lenth in lists and k lists, the pop and push take O(lgk)
//Space complexity is O(k), which is the size of heap

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
    
private:
struct cmp
{
    bool operator ()(const ListNode *a, const ListNode *b)
    {return a->val > b->val;}
};

public:
    ListNode *mergeKLists(vector<ListNode *> &lists) 
    {
        //boundary check
        int n = lists.size();
        if(n == 0)
        {return NULL;}
        else if(n ==1)
        {return lists[0];}
        
        //define the pointer and heap
        
        ListNode* head = new ListNode(0);
        ListNode* ptr(NULL);
        priority_queue<ListNode*, vector<ListNode *>, cmp>  heap;
        
        //push every first element of k list into heap
        for(int i = 0; i < n; ++i)
        {
            if(lists[i] != NULL)
            {
                heap.push(lists[i]);
                lists[i] = lists[i]->next;
            }
        }
        //pop the min value of heap
        while(!heap.empty())
        {
            ListNode* nptr = heap.top();
            //nptr is the min of heap, pop it out
            heap.pop();
            head->next = nptr;
            head = nptr;
            
            //insert new node to heap of the next node of the popped node
            if(head->next)
            {heap.push(nptr->next);}
        }
        return head->next;
    }
};
