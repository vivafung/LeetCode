Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
    
    
    
    
    
    
class Solution {
public:
    vector<vector<int> > threeSum(vector<int> &num) 
    {
        std::sort(num.begin(),num.end());
        
        vector<vector<int>> result;
        //map<int, int> hash;
        int n = num.size();
        if(n<3)
        {return result;}
        
        for(int i = 0; i<n; i++)
        {
            vector<int> temp;
            int j = i+1;
            int k = n-1;
            int target = 0-num[i];
            while(j<k)
            {
                if(num[j]+num[k] == target)
                {
                    temp.push_back(num[i]);
                    temp.push_back(num[j]);
                    temp.push_back(num[k]);
                    result.push_back(temp);
                    j++;
                    k--;
                    
                    //skip the duplicates
                    while(j<k && num[j] == num[j+1])
                    {j++;}
                    while(j<k && num[k] == num[k-1])
                    {k--;}
                }
                
                else if(num[j]+num[k] < target)
                {j++;}
                
                else
                {k--;}
            }
        }
      return result;  
    }
};
