Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode *root) 
    {
        if(root==NULL)
        {return root;}
        
        while(root != NULL)
        {
            int result;
            if(root->left->val < root->val && root->right->val > root->val)
            {
                isValidBST(root->left);
                isValidBST(root->right);
            }
            return result = Max(isValidBST(root->left),isValidBST(root->right));
            
            else 
            {return false;}
        }
        
    }
};
