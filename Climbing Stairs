You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

//Solution 1 Recursion
class Solution {
public:
    int climbStairs(int n) 
    {
        if(n <= 0){return 0;}
        if(n == 1){return 1;}
        if(n == 2){return 2;}
       
        return climbStairs(n-1)+climbStairs(n-2);
    }
};


//Solution 2: DP
class Solution {
public:
    int climbStairs(int n) 
    {
        vector<int> a(n+1);
        a[0] = 1;
        a[1] = 1;
        for(int i = 2; i<=n; i++)
        {
            a[i] = a[i-1] + a[i-2];
        }
       
        return a[n];
    }
};
