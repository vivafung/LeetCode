Given an array of integers, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2

//scan the vector and save them into hashmap
//key = the value of the elements of vector, value = index
//scan the hashmap again and store the index into a vector
//Time complexity O(n)
class Solution {
public:
    vector<int> twoSum(vector<int> &numbers, int target) 
    {
        map<int, int> hashmap;
        vector<int> vec;
        int n = numbers.size();
        if(n == 0 || n == 1)
        {return vec;}
        
        for(int i = 0; i < n; i++)
        {
            hashmap[numbers[i]] = i;
        }
        
        for(int i = 0; i < n; i++)
        {
            int find = target - numbers[i];
            //if the wanted results exists in map
            if(hashmap.find(find) != hashmap.end())
            {
                //give the two index to vector
                vec.push_back(i+1);
                vec.push_back(hashmap[find] + 1);
                break;
            }
        }
        
        return vec;
        
    }
};
