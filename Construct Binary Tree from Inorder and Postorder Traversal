/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) 
    {
        if(postorder.size() == 0 || inorder.size() == 0)
        {return NULL;}
        
        TreeNode *root = buildTreeRecursive(postorder, inorder, 0, postorder.size()-1, 0, inorder.size()-1);
        return root;
    }
    
    TreeNode *buildTreeRecursive(vector<int> &postorder, vector<int> &inorder, int postS, int postE, int inS, int inE)
    {
        if(postS>postE || inS>inE)
        {return NULL;}
        
        TreeNode *root = new TreeNode(postorder[postE]);
        
        if(postS==postE|| inS==inE)
        return root;
        
        int index;
        for(int i=inS; i<=inE; i++)
        {
            if(inorder[i] == postorder[postE])
            {
                index = i;
            }
        }
        
        int n = index-inS;
        root->left = buildTreeRecursive(postorder, inorder, postS, postE-index+1, inS, index-1);
        root->right = buildTreeRecursive(postorder, inorder, postS+index+1, postE-1, index+1, inE);
        return root;
    }
};
