Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

//Solution 1. brute force. 
//Total time complexity is O(nlogn) since there are n nodes and Binary tree insert time is O(lgn)
//Solution 2. Recursion. 
//The list’s length could be found in O(N) time by traversing the entire list’s once. 
//The recursive calls traverse the list and create tree’s nodes by the list’s order, 
//which also takes O(N) time. 
//Therefore, the overall run time complexity is still O(N).

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  BinaryTree* sortedListToBST(ListNode *& list, int start, int end) {
  if (start > end) return NULL;
  // same as (start+end)/2, avoids overflow
  int mid = start + (end - start) / 2;
  BinaryTree *leftChild = sortedListToBST(list, start, mid-1);
  BinaryTree *parent = new BinaryTree(list->data);
  parent->left = leftChild;
  list = list->next;
  parent->right = sortedListToBST(list, mid+1, end);
  return parent;
}
 
BinaryTree* sortedListToBST(ListNode *head, int n) {
  return sortedListToBST(head, 0, n-1);
}
};
