Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].



class Solution {
public:
    vector<vector<int> > permute(vector<int> &num) 
    {
        vector<vector<int>> vec;
        int n=num.size();
        perm(num, 0);
        return vec;
    }
    
    void perm(vector<int> &num, int i) 
    {
        vector<vector<int>> vec;
        int N;
        if(i==N)
        {
            vec.push_back(num);
        }
        
        for(int j = i; j<N; j++)
        {
            swap(num[i], num[j]);
            perm(num, i+1);
            swap(num[j], num[i]);
        }
    
    }
};

=======================================================
class Solution {
public:
    vector<vector<int> > permute(vector<int> &num) 
    {
       vector<int> mediRes;  
       vector<vector<int> > res;  
       perm(num, mediRes, res);  
       return res;  
    }
    
    void perm(vector<int> &num, vector<int> &medi, vector<vector<int> > &result) 
    {
        int n=num.size();
        if(n==1)
        {
            medi.push_back(num[0]);
            result.push_back(medi);
            medi.pop_back();
            return;
        }
        
        for(int i=0; i<n; i++)
        {
            medi.push_back(num[0]);
            vector<int> remainer = num;
            remainer.erase(num.begin()+i);
            perm(remainer, medi, result);
            medi.pop_back();
        }
        return;
    }
};
