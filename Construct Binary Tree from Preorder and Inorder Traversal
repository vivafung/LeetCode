/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

 /**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) 
    {
        if(preorder.size() == 0 || inorder.size() == 0)
        {return NULL;}
        
        TreeNode *root = buildTreeRecursive(preorder, inorder, 0, preorder.size()-1, 0, inorder.size()-1);
        return root;
    }
    
    TreeNode *buildTreeRecursive(vector<int> &preorder, vector<int> &inorder, int preS, int preE, int inS, int inE)
    {
        if(preS>preE || inS>inE)
        {return NULL;}
        
        TreeNode *root = new TreeNode(preorder[preS]);
        
        if(preS==preE || inS==inE)
        return root;
        
        int index;
        for(int i=inS; i<=inE; i++)
        {
            if(inorder[i] == preorder[preS])
            {
                index = i;
            }
        }
        
        int n = index-inS;
        root->left = buildTreeRecursive(preorder, inorder, preS+1, preS+n, inS, inE-1);
        root->right = buildTreeRecursive(preorder, inorder, preS+n+1, preE, index+1, inE);
        
        return root;
    }
};
